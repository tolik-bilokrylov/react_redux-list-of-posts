{"version":3,"sources":["helpers/api.js","store/posts.ts","store/post.ts","store/index.ts","components/PostListItem/PostListItem.tsx","components/Loader/Loader.tsx","components/PostList/PostsList.tsx","helpers/options.ts","components/NewCommentForm/NewCommentForm.tsx","components/PostDetails/PostDetails.tsx","App.tsx","index.tsx"],"names":["BASE_URL","request","url","options","fetch","then","response","ok","Error","status","json","updatePostId","id","type","initialState","posts","postId","userId","reducer","state","action","removeComment","Promise","resolve","method","headers","setTimeout","addComment","data","body","JSON","stringify","fetchPostInfo","setIsLoading","dispatch","all","post","comments","setPost","setComments","rootReducer","combineReducers","postsReducer","postReducer","getPostsSelector","getActivePostId","getActiveUserId","getPost","getComments","store","createStore","composeWithDevTools","applyMiddleware","thunk","PostsListItem","activePostId","useSelector","useDispatch","title","className","classnames","active","onClick","Loader","PostsList","useState","isLoading","activeUserId","useEffect","res","fetchPosts","filtredPost","useMemo","postsCopy","length","filter","map","key","value","name","NewCommentForm","userName","email","comment","setComment","onSubmit","event","a","preventDefault","placeholder","onChange","target","required","PostDetails","isCommentsVisible","setIsCommentsVisible","commentId","current","item","disabled","App","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fbd9e751.chunk.js","sourcesContent":["export const BASE_URL = \"https://mate-api.herokuapp.com/\";\r\n\r\nexport const request = (url = \"\", options) => {\r\n  return fetch(`${BASE_URL}${url}`, options).then((response) => {\r\n    if (!response.ok) {\r\n      throw new Error(`${response.status}`);\r\n    }\r\n\r\n    return response.json();\r\n  });\r\n};\r\n\r\nexport const post = (url, data) => {\r\n  return request(url, {\r\n    method: \"POST\",\r\n    headers: { \"Content-Type\": \"application/json; charset=utf-8\" },\r\n    body: JSON.stringify(data),\r\n  });\r\n};\r\n\r\nexport const patch = (url, data) => {\r\n  return request(url, {\r\n    method: \"PATCH\",\r\n    headers: { \"Content-Type\": \"application/json; charset=utf-8\" },\r\n    body: JSON.stringify(data),\r\n  });\r\n};\r\n\r\nexport const remove = (url) => {\r\n  return request(url, {\r\n    method: \"DELETE\",\r\n    headers: { \"Content-Type\": \"application/json; charset=utf-8\" },\r\n  });\r\n};\r\n","import { Dispatch, AnyAction } from \"redux\";\r\nimport { request } from \"../helpers/api\";\r\nimport { RootStatePosts } from '../types';\r\n\r\n// Action types\r\nconst SET_POSTS = \"SET_POSTS\";\r\nconst UPDATE_ACTIVE_POST_ID = \"UPDATE_ACTIVE_POST_ID\";\r\nconst UPDATE_ACTIVE_USER_ID = \"UPDATE_ACTIVE_USER_ID\";\r\n\r\n// Action creators\r\nexport const setPosts = (posts: any[]) => ({ type: SET_POSTS, posts });\r\n\r\nexport const fetchPosts = (\r\n  setIsLoading: React.Dispatch<React.SetStateAction<boolean>>\r\n) => (dispatch: Dispatch) => {\r\n  setIsLoading(true);\r\n  request(\"posts\").then((res) => {\r\n    dispatch(setPosts(res.data));\r\n    setIsLoading(false);\r\n  });\r\n};\r\n\r\nexport const updatePostId = (id: number) => ({\r\n  type: UPDATE_ACTIVE_POST_ID,\r\n  id,\r\n});\r\n\r\nexport const updateUsertId = (id: number) => ({\r\n  type: UPDATE_ACTIVE_USER_ID,\r\n  id,\r\n});\r\n\r\nconst initialState: RootStatePosts = {\r\n  posts: [],\r\n  postId: 0,\r\n  userId: 0,\r\n};\r\n\r\nconst reducer = (state = initialState, action: AnyAction) => {\r\n  switch (action.type) {\r\n    case SET_POSTS:\r\n      return { ...state, posts: action.posts };\r\n\r\n    case UPDATE_ACTIVE_POST_ID:\r\n      return { ...state, postId: action.id };\r\n\r\n    case UPDATE_ACTIVE_USER_ID:\r\n      return { ...state, userId: action.id };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","import { Dispatch, AnyAction } from \"redux\";\r\nimport { request, remove, post } from \"../helpers/api\";\r\nimport { Post, Comment, RootStatePost } from \"../types\";\r\n\r\n// Action types\r\nconst SET_POST = \"SET_POST\";\r\nconst SET_COMMENTS = \"SET_COMMENTS\";\r\n\r\n// Action creators\r\nexport const setPost = (post: Post) => ({\r\n  type: SET_POST,\r\n  post,\r\n});\r\n\r\nexport const setComments = (comments: Comment[]) => ({\r\n  type: SET_COMMENTS,\r\n  comments,\r\n});\r\n\r\nexport const removeComment = (id: number) => {\r\n  return new Promise((resolve: any) => {\r\n    remove(`comments/${id}`);\r\n    setTimeout(() => resolve(), 1000);\r\n  });\r\n};\r\n\r\nexport const addComment = (\r\n  options: Comment & { name: string; email: string }\r\n) => post(\"comments\", options);\r\n\r\nexport const fetchPostInfo = (\r\n  id: number,\r\n  setIsLoading: React.Dispatch<React.SetStateAction<boolean>>\r\n) => (dispatch: Dispatch) => {\r\n  Promise.all([request(`posts/${id}`), request(`comments/?postId=${id}`)]).then(\r\n    ([post, comments]) => {\r\n      dispatch(setPost(post.data));\r\n      dispatch(setComments(comments.data));\r\n      setIsLoading(false);\r\n    }\r\n  );\r\n};\r\n\r\nconst initialState: RootStatePost = {\r\n  post: null,\r\n  comments: [],\r\n};\r\n\r\nconst reducer = (state = initialState, action: AnyAction) => {\r\n  switch (action.type) {\r\n    case SET_POST:\r\n      return { ...state, post: action.post };\r\n\r\n    case SET_COMMENTS:\r\n      return { ...state, comments: action.comments };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport thunk from 'redux-thunk';\r\nimport postsReducer from \"./posts\";\r\nimport postReducer from \"./post\";\r\n\r\nconst rootReducer = combineReducers({\r\n  posts: postsReducer,\r\n  post: postReducer,\r\n});\r\nexport type RootState = ReturnType<typeof rootReducer>;\r\n\r\nexport const getPostsSelector = (state: RootState) => state.posts.posts;\r\nexport const getActivePostId = (state: RootState) => state.posts.postId;\r\nexport const getActiveUserId = (state: RootState) => state.posts.userId;\r\nexport const getPost = (state: RootState) => state.post.post;\r\nexport const getComments = (state: RootState) => state.post.comments;\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  composeWithDevTools(applyMiddleware(thunk))\r\n);\r\nexport default store;\r\n","import React from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { Post } from \"../../types\";\r\nimport classnames from \"classnames\";\r\nimport { getActivePostId } from \"../../store\";\r\nimport { updatePostId } from \"../../store/posts\";\r\n\r\nexport const PostsListItem: React.FC<{ post: Post }> = ({ post }) => {\r\n  const activePostId = useSelector(getActivePostId);\r\n  const dispatch = useDispatch();\r\n  const { title, userId, id } = post;\r\n\r\n  const onClick = () => {\r\n    if (activePostId === id) {\r\n      dispatch(updatePostId(0));\r\n    } else {\r\n      dispatch(updatePostId(id));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div>\r\n        <b>{`[User #${userId}]: `}</b>\r\n        {title}\r\n      </div>\r\n\r\n      <button\r\n        type=\"button\"\r\n        className={classnames(\"button\", {\r\n          active: id === activePostId,\r\n        })}\r\n        onClick={onClick}\r\n      >\r\n        {activePostId === id ? \"Close\" : \"Open\"}\r\n      </button>\r\n    </>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport \"./Loader.scss\";\r\n\r\nexport const Loader = () => (\r\n  <div className=\"Loader\">\r\n    <div className=\"Loader__content\" />\r\n  </div>\r\n)\r\n","import React, { useEffect, useMemo, useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { getPostsSelector, getActiveUserId } from \"../../store/index\";\r\nimport { fetchPosts } from \"../../store/posts\";\r\nimport { Post } from \"../../types\";\r\nimport { PostsListItem } from \"../PostListItem/PostListItem\";\r\nimport { Loader } from \"../Loader/Loader\";\r\nimport \"./PostsList.scss\";\r\n\r\nexport const PostsList = () => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const posts = useSelector(getPostsSelector);\r\n  const activeUserId = useSelector(getActiveUserId);\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchPosts(setIsLoading));\r\n  }, [dispatch]);\r\n\r\n  const filtredPost = useMemo(() => {\r\n    let postsCopy = [...posts];\r\n    if (postsCopy.length > 0 && activeUserId) {\r\n      postsCopy = postsCopy.filter((post) => post.userId === activeUserId);\r\n    }\r\n\r\n    return postsCopy;\r\n  }, [posts, activeUserId]);\r\n\r\n  return (\r\n    <div className=\"PostsList\">\r\n      <h2>Posts:</h2>\r\n\r\n      {isLoading ? (\r\n        <Loader />\r\n      ) : (\r\n        <ul className=\"PostsList__list\">\r\n          {filtredPost.length > 0\r\n            ? filtredPost.map((post: Post) => (\r\n              <li className=\"PostsList__item\" key={post.id}>\r\n                <PostsListItem post={post} />\r\n              </li>\r\n            ))\r\n            : \"no posts\"}\r\n        </ul>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","export const options = [\r\n  { value: 0, name: \"All users\" },\r\n  { value: 1, name: \"Leanne Graham\" },\r\n  { value: 2, name: \"Ervin Howell\" },\r\n  { value: 3, name: \"Clementine Bauch\" },\r\n  { value: 4, name: \"Patricia Lebsack\" },\r\n  { value: 5, name: \"Chelsey Dietrich\" },\r\n  { value: 6, name: \"Mrs. Dennis Schulist\" },\r\n  { value: 7, name: \"Kurtis Weissnat\" },\r\n  { value: 8, name: \"Nicholas Runolfsdottir V\" },\r\n  { value: 9, name: \"Glenna Reichert\" },\r\n  { value: 10, name: \"Leanne Graham\" },\r\n];\r\n","import React, { useState } from \"react\";\r\nimport { addComment, fetchPostInfo } from \"../../store/post\";\r\nimport { getActivePostId } from \"../../store/index\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport \"./NewComment.scss\";\r\n\r\nexport const NewCommentForm: React.FC<{\r\n  setIsLoading: React.Dispatch<React.SetStateAction<boolean>>;\r\n}> = ({ setIsLoading }) => {\r\n  const activePostId = useSelector(getActivePostId);\r\n  const [comment, setComment] = useState({\r\n    userName: \"\",\r\n    email: \"\",\r\n    body: \"\",\r\n  });\r\n  const { userName, email, body } = comment;\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const reset = () => {\r\n    setComment({ userName: \"\", email: \"\", body: \"\" });\r\n  };\r\n\r\n  const onSubmit = async (event: React.FormEvent<HTMLFormElement>) => {\r\n    event.preventDefault();\r\n    setIsLoading(true);\r\n\r\n    if (userName && email && body) {\r\n      const comment = { name: userName, email, body, postId: activePostId };\r\n      await addComment(comment);\r\n      dispatch(fetchPostInfo(activePostId, setIsLoading));\r\n      reset();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form className=\"NewCommentForm\" onSubmit={onSubmit}>\r\n      <div className=\"form-field\">\r\n        <input\r\n          type=\"text\"\r\n          name=\"name\"\r\n          placeholder=\"Your name\"\r\n          value={userName}\r\n          className=\"NewCommentForm__input\"\r\n          onChange={(event) => setComment({ ...comment, userName: event.target.value })}\r\n          required\r\n        />\r\n      </div>\r\n\r\n      <div className=\"form-field\">\r\n        <input\r\n          type=\"text\"\r\n          name=\"email\"\r\n          placeholder=\"Your email\"\r\n          className=\"NewCommentForm__input\"\r\n          onChange={(event) => setComment({ ...comment, email: event.target.value })}\r\n          value={email}\r\n          required\r\n        />\r\n      </div>\r\n\r\n      <div className=\"form-field\">\r\n        <textarea\r\n          name=\"body\"\r\n          placeholder=\"Type comment here\"\r\n          className=\"NewCommentForm__input\"\r\n          onChange={(event) => setComment({ ...comment, body: event.target.value })}\r\n          value={body}\r\n          required\r\n        />\r\n      </div>\r\n\r\n      <button type=\"submit\" className=\"NewCommentForm__submit-button button\">\r\n        Add a comment\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { NewCommentForm } from \"../NewCommentForm/NewCommentForm\";\r\nimport { getPost, getActivePostId, getComments } from \"../../store\";\r\nimport { fetchPostInfo, removeComment } from \"../../store/post\";\r\nimport { Comment } from \"../../types\";\r\nimport { Loader } from \"../Loader/Loader\";\r\nimport \"./PostDetails.scss\";\r\n\r\nexport const PostDetails = () => {\r\n  const post = useSelector(getPost);\r\n\r\n  const activePostId = useSelector(getActivePostId);\r\n  const comments = useSelector(getComments);\r\n  const dispatch = useDispatch();\r\n  const [isCommentsVisible, setIsCommentsVisible] = useState(true);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (activePostId) {\r\n      dispatch(fetchPostInfo(activePostId, setIsLoading));\r\n    }\r\n  }, [activePostId, dispatch]);\r\n\r\n  const onClick = async (commentId: number, postId: number) => {\r\n    setIsLoading(true);\r\n    await removeComment(commentId);\r\n    dispatch(fetchPostInfo(postId, setIsLoading));\r\n  };\r\n\r\n  return (\r\n    <div className=\"PostDetails\">\r\n      {isLoading ? (\r\n        <Loader />\r\n      ) : (\r\n        <>\r\n          {activePostId && post ? (\r\n            <>\r\n              <h2>Post details:</h2>\r\n\r\n              <section className=\"PostDetails__post\">\r\n                <p>{post.title}</p>\r\n              </section>\r\n\r\n              <section className=\"PostDetails__comments\">\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"button\"\r\n                  onClick={() => setIsCommentsVisible((current) => !current)}\r\n                >\r\n                  {isCommentsVisible ? \"Hide comments\" : \"Show comments\"}\r\n                </button>\r\n                {isCommentsVisible && (\r\n                  <ul className=\"PostDetails__list\">\r\n                    {comments.length > 0\r\n                      ? comments.map((item: Comment) => (\r\n                        <li className=\"PostDetails__list-item\" key={item.id}>\r\n                          <button\r\n                            type=\"button\"\r\n                            className=\"PostDetails__remove-button button\"\r\n                            onClick={() => onClick(item.id!, activePostId)}\r\n                            disabled={isLoading}\r\n                          >\r\n                            X\r\n                          </button>\r\n                          <p>{item.body}</p>\r\n                        </li>\r\n                      ))\r\n                      : \"No comments\"}\r\n                  </ul>\r\n                )}\r\n              </section>\r\n              \r\n              <section>\r\n                <div className=\"PostDetails__form-wrapper\">\r\n                  <NewCommentForm setIsLoading={setIsLoading} />\r\n                </div>\r\n              </section>\r\n            </>\r\n          ) : (\r\n            <span className=\"select-post\">Select post</span>\r\n          )}\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { PostsList } from \"./components/PostList/PostsList\";\r\nimport { options } from \"./helpers/options\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { getActiveUserId } from \"./store\";\r\nimport { updateUsertId } from \"./store/posts\";\r\nimport { PostDetails } from \"./components/PostDetails/PostDetails\";\r\nimport \"./App.scss\";\r\n\r\nconst App = () => {\r\n  const activeUserId = useSelector(getActiveUserId);\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App__header\">\r\n        <label>\r\n          Select a user: &nbsp;\r\n          <select\r\n            className=\"App__user-selector\"\r\n            value={activeUserId}\r\n            onChange={(event) => dispatch(updateUsertId(+event.target.value))}\r\n          >\r\n            {options.map(({ value, name }) => (\r\n              <option value={value} key={value}>\r\n                {name}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </label>\r\n      </header>\r\n      <main className=\"App__main\">\r\n        <div className=\"App__sidebar\">\r\n          <PostsList />\r\n        </div>\r\n        <div className=\"App__content\">\r\n          <PostDetails />\r\n        </div>\r\n      </main>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { HashRouter } from 'react-router-dom';\r\n\r\nimport App from './App';\r\nimport store from './store';\r\n\r\nconst Root = () => (\r\n  <Provider store={store}>\r\n    <HashRouter>\r\n      <App />\r\n    </HashRouter>\r\n  </Provider>\r\n);\r\n\r\nReactDOM.render(<Root />, document.getElementById('root'));\r\n"],"sourceRoot":""}